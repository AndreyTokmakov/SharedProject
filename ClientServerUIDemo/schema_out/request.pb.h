// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_INCLUDED_request_2eproto
#define PROTOBUF_INCLUDED_request_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_request_2eproto 

namespace protobuf_request_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_request_2eproto
namespace common {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace common
namespace google {
namespace protobuf {
template<> ::common::Request* Arena::CreateMaybeMessage<::common::Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace common {

enum Request_Type {
  Request_Type_None = 0,
  Request_Type_Message = 1,
  Request_Type_Event = 2,
  Request_Type_Command = 3,
  Request_Type_Request_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_Type_Request_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_None;
const Request_Type Request_Type_Type_MAX = Request_Type_Command;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Request_CommandType {
  Request_CommandType_Shutdown = 0,
  Request_CommandType_Request_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Request_CommandType_Request_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Request_CommandType_IsValid(int value);
const Request_CommandType Request_CommandType_CommandType_MIN = Request_CommandType_Shutdown;
const Request_CommandType Request_CommandType_CommandType_MAX = Request_CommandType_Shutdown;
const int Request_CommandType_CommandType_ARRAYSIZE = Request_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_CommandType_descriptor();
inline const ::std::string& Request_CommandType_Name(Request_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_CommandType_descriptor(), value);
}
inline bool Request_CommandType_Parse(
    const ::std::string& name, Request_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_CommandType>(
    Request_CommandType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum StatusCase {
    kCmdType = 2,
    kPayload = 3,
    STATUS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Request_Type Type;
  static const Type None =
    Request_Type_None;
  static const Type Message =
    Request_Type_Message;
  static const Type Event =
    Request_Type_Event;
  static const Type Command =
    Request_Type_Command;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }

  typedef Request_CommandType CommandType;
  static const CommandType Shutdown =
    Request_CommandType_Shutdown;
  static inline bool CommandType_IsValid(int value) {
    return Request_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Request_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Request_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Request_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Request_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Request_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Request_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .common.Request.Type event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  ::common::Request_Type event_type() const;
  void set_event_type(::common::Request_Type value);

  // .common.Request.CommandType cmd_type = 2;
  private:
  bool has_cmd_type() const;
  public:
  void clear_cmd_type();
  static const int kCmdTypeFieldNumber = 2;
  ::common::Request_CommandType cmd_type() const;
  void set_cmd_type(::common::Request_CommandType value);

  // string payload = 3;
  private:
  bool has_payload() const;
  public:
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  void clear_status();
  StatusCase status_case() const;
  // @@protoc_insertion_point(class_scope:common.Request)
 private:
  void set_has_cmd_type();
  void set_has_payload();

  inline bool has_status() const;
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int event_type_;
  union StatusUnion {
    StatusUnion() {}
    int cmd_type_;
    ::google::protobuf::internal::ArenaStringPtr payload_;
  } status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_request_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// .common.Request.Type event_type = 1;
inline void Request::clear_event_type() {
  event_type_ = 0;
}
inline ::common::Request_Type Request::event_type() const {
  // @@protoc_insertion_point(field_get:common.Request.event_type)
  return static_cast< ::common::Request_Type >(event_type_);
}
inline void Request::set_event_type(::common::Request_Type value) {
  
  event_type_ = value;
  // @@protoc_insertion_point(field_set:common.Request.event_type)
}

// .common.Request.CommandType cmd_type = 2;
inline bool Request::has_cmd_type() const {
  return status_case() == kCmdType;
}
inline void Request::set_has_cmd_type() {
  _oneof_case_[0] = kCmdType;
}
inline void Request::clear_cmd_type() {
  if (has_cmd_type()) {
    status_.cmd_type_ = 0;
    clear_has_status();
  }
}
inline ::common::Request_CommandType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:common.Request.cmd_type)
  if (has_cmd_type()) {
    return static_cast< ::common::Request_CommandType >(status_.cmd_type_);
  }
  return static_cast< ::common::Request_CommandType >(0);
}
inline void Request::set_cmd_type(::common::Request_CommandType value) {
  if (!has_cmd_type()) {
    clear_status();
    set_has_cmd_type();
  }
  status_.cmd_type_ = value;
  // @@protoc_insertion_point(field_set:common.Request.cmd_type)
}

// string payload = 3;
inline bool Request::has_payload() const {
  return status_case() == kPayload;
}
inline void Request::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline void Request::clear_payload() {
  if (has_payload()) {
    status_.payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_status();
  }
}
inline const ::std::string& Request::payload() const {
  // @@protoc_insertion_point(field_get:common.Request.payload)
  if (has_payload()) {
    return status_.payload_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Request::set_payload(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:common.Request.payload)
  if (!has_payload()) {
    clear_status();
    set_has_payload();
    status_.payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  status_.payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.Request.payload)
}
#if LANG_CXX11
inline void Request::set_payload(::std::string&& value) {
  // @@protoc_insertion_point(field_set:common.Request.payload)
  if (!has_payload()) {
    clear_status();
    set_has_payload();
    status_.payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  status_.payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.Request.payload)
}
#endif
inline void Request::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_payload()) {
    clear_status();
    set_has_payload();
    status_.payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  status_.payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.Request.payload)
}
inline void Request::set_payload(const char* value, size_t size) {
  if (!has_payload()) {
    clear_status();
    set_has_payload();
    status_.payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  status_.payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.Request.payload)
}
inline ::std::string* Request::mutable_payload() {
  if (!has_payload()) {
    clear_status();
    set_has_payload();
    status_.payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:common.Request.payload)
  return status_.payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_payload() {
  // @@protoc_insertion_point(field_release:common.Request.payload)
  if (has_payload()) {
    clear_has_status();
    return status_.payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_payload(::std::string* payload) {
  if (!has_payload()) {
    status_.payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_status();
  if (payload != NULL) {
    set_has_payload();
    status_.payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  }
  // @@protoc_insertion_point(field_set_allocated:common.Request.payload)
}

inline bool Request::has_status() const {
  return status_case() != STATUS_NOT_SET;
}
inline void Request::clear_has_status() {
  _oneof_case_[0] = STATUS_NOT_SET;
}
inline Request::StatusCase Request::status_case() const {
  return Request::StatusCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::Request_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::Request_Type>() {
  return ::common::Request_Type_descriptor();
}
template <> struct is_proto_enum< ::common::Request_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::Request_CommandType>() {
  return ::common::Request_CommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_request_2eproto
